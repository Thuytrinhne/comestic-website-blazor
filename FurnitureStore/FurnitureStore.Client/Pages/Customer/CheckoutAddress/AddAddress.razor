@page "/checkout/add-address"
@using FurnitureStore.Client.Helpers
@using FurnitureStore.Client.Layout.Customer
@using FurnitureStore.Client.Services
@using FurnitureStore.Client.Services.IService
@using FurnitureStore.Shared.DTOs
@inject LocationService LocationService
@inject IUserService _userService
@inject CustomAuthenticationStateProvider _authStateProvider
@inject NotificationService _notificationService
@inject NavigationManager navManager

@layout MainLayout

<PageTitle>Home</PageTitle>


<div class="checkout-main">
	<div class="checkout">
		<div class="checkout_container">
			<div class="backhome" style="font-size: 12px;">
				<a href="">HOME</a>
				/
				<a href="">CHECKOUT</a>
			</div>

			<h1>CHECKOUT</h1>
		</div>
	</div>

	<div class="checkout_detail">
		<div class="payment_info">
            <EditForm Model="@AddressModel" OnValidSubmit="HandleValidSubmit">

			<div class="info">
				<h1>Thêm địa chỉ mới</h1>
				
					<div class="info_input">
						<label for="">Họ và tên</label><br>
                        <input @bind="@AddressModel.Name" type="text">
					
						<br>
						<span class="msg-error">{{$message}}</span>
						
					</div>

					<div class="info_input">
						<label for="">Số điện thoại <span style="color: red;">*</span></label><br>
                        <input @bind="@AddressModel.Phone" type="tel">
					
						<br>
						<span class="msg-error">{{$message}}</span>
					
					</div>


					<div class="Location">
						<div class="info_input">
							<label for="">Tỉnh/ Thành phố <span style="color: red;">*</span></label><br>
                            <select id="city-select" name="city" @onchange="OnProvinceChange">
								<option value="">Chọn khu vực</option>
                                @foreach (var province in Provinces)
                                {
                                    <option value="@province.ProvinceID">@province.ProvinceName</option>
                                }
							</select>
						
							<br>
							<span class="msg-error">{{$message}}</span>
						
						</div>

						<div class="info_input">
							<label for="">Quận/ Huyện <span style="color: red;">*</span></label><br>
                            <select id="district-select" name="district" @onchange="OnDistrictChange">
								<option value="">Chọn khu vực</option>
                                @foreach (var district in Districts)
                                {
                                    <option value="@district.DistrictID">@district.DistrictName</option>
                                }
							</select>
						
							<br>
							<span class="msg-error">{{$message}}</span>
						
						</div>
						<div class="info_input">
							<label for="">Phường/ Xã <span style="color: red;">*</span></label><br>
                            <select id="ward-select" name="village" @onchange="OnWardChange">
								<option value="">Chọn phường xã</option>
                                @foreach (var ward in Wards)
                                {
                                    <option value="@ward.WardID">@ward.WardName</option>
                                }
							</select>
						
							<br>
							<span class="msg-error">{{$message}}</span>
						
						</div>
					</div>

					<div class="info_input">
						<label for="">Số nhà, tên đường <span style="color: red;">*</span></label><br>
                        <input @bind="@AddressModel.DetailAddress" type="text">
					
						<br>
						<span class="msg-error">{{$message}}</span>
						
					</div>

					@* <div class="info_input default-address">

                        <input name="@AddressModel.Default==1" type="radio" checked>
						<label for="">Đặt làm địa chỉ mặc định</label><br>
					</div> *@
					<div>
						<button type="button" onclick="backClick()" class="addLocation-btn">
							Trở lại
						</button>
						<button type="submit" class="addLocation-btn">
							Thêm địa chỉ
						</button>
					</div>

			</div>
            </EditForm>


		</div>

	</div>

</div>
<script src="{{asset('Assets/js/address.js')}}"></script>
<script>
	function backClick() {

		var idUserAddressChoosed = getIDUserAddressFromCookie();
		var url = "{{ route('back-choose-location', ['id' => '14']) }}";
		url = url.replace('14', idUserAddressChoosed);
		window.location.href = url;
	}
	function getIDUserAddressFromCookie() {
		var cookies = document.cookie.split("; ");

		var idUserAddressChoosed = "";
		for (var i = 0; i < cookies.length; i++) {
			var cookie = cookies[i].split("=");
			if (cookie[0] === "idUserAddressChoosed") {
				idUserAddressChoosed = decodeURIComponent(cookie[1]);
				break;
			}
		}
		return idUserAddressChoosed;
	}
</script>
@code
{
    private List<Province> Provinces = new List<Province>();
    private List<District> Districts = new List<District>();
    private List<Ward> Wards = new List<Ward>();
    private UserAddressDTO AddressModel = new UserAddressDTO();
    private bool IsDefault
    {
        get => AddressModel.Default == 1;
        set => AddressModel.Default = value ? 1 : 0;
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadProvinces();
    }

    private async Task LoadProvinces()
    {
        Provinces = await LocationService.GetProvinces();
    }

    private async Task OnProvinceChange(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedValue))
        {

            Districts = await LocationService.GetDistricts(selectedValue);
            Wards.Clear();  // Clear wards when a new province is selected

            AddressModel.Province = Provinces.FirstOrDefault(p => p.ProvinceID == selectedValue).ProvinceName;
            AddressModel.District = string.Empty;
            AddressModel.Ward = string.Empty;
        }
    }

    private async Task OnDistrictChange(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedValue))
        {
            Wards = await LocationService.GetWards(selectedValue);
            AddressModel.District = Districts.FirstOrDefault(p => p.DistrictID == selectedValue).DistrictName;
            AddressModel.Ward = string.Empty;
        }
    }

    private void OnWardChange(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedValue))
        {
            AddressModel.Ward = Wards.FirstOrDefault(p => p.WardID == selectedValue).WardName;
        }
    }
    private async void HandleValidSubmit()
    {
        // Handle form submission here
        var result = await _userService.AddUserAddress(AddressModel, _authStateProvider.CurrentUser.Id);
        if (result)
        {
            await _notificationService.DisplaySuccessMessage("Thêm địa chỉ thành công !");
            navManager.NavigateTo("/checkout");

        }
        else
        {
            await _notificationService.DisplayErrorMessage("Đã có lỗi xảy ra, bạn vui lòng thử lại nhé ! ");
        }
    }

}
